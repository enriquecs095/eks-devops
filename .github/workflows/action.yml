name: Building and Containerizing a java project for Devsu Challenge

on:
  push: 
    branches:
      - master
      - main
    
jobs:

  build_and_push_image:
    runs-on: ubuntu-latest

    steps:
      - name: GitHub Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USERNAME }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build with maven 
        run: mvn clean package

      ##Unit test
      - name: Unit test with maven
        run: mvn test

      ##Static code Analysis
      # - name: SonarQube Scan
      #   uses: sonarsource/sonarqube-scan-action@v3.0.0
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #     projectBaseDir: src/

     ##Code Coverage
      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/index.html

      ##Build and push image
      - name: Get short SHA
        id: slug
        run: echo "::set-output name=sha7::$(echo ${GITHUB_SHA} | cut -c1-7)"
          
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          context: .
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.slug.outputs.sha7 }}
            ghcr.io/${{ github.repository }}:latest


  Deploy_terraform_insfrastructure:
    runs-on: ubuntu-latest  
    
    steps: 

      - name: GitHub Checkout
        uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~> 1.9.6"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Terraform init
        working-directory: /home/runner/work/eks-devops/eks-devops/terraform
        run: terraform init -backend-config="bucket=${{ secrets.BUCKET_NAME }}" -backend-config="key=${{ secrets.BUCKET_KEY }}" -backend-config="dynamodb_table=dynamodb-state-locking" -backend-config="encrypt=true"

      - name: Terraform apply
        working-directory: /home/runner/work/eks-devops/eks-devops/terraform
        run: terraform apply --var="environment=${{ secrets.ENVIRONMENT_TERRAFORM_DEPLOYMENT }}" --auto-approve


  Deploy_k8s_manifests:
    runs-on: ubuntu-latest
    needs: [ build_and_push_image, Deploy_terraform_insfrastructure ]
    env:
      KUBECONFIG: ${{ secrets.KUBE_CONFIG_PATH }}

    steps: 

      - name: GitHub Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - uses: azure/setup-kubectl@v4
        with:
            version: 'v1.31.1'
        id: install

      - name: Get and set kubeconfig
        run: |
          aws eks --region us-east-1 update-kubeconfig --name ${{ secrets.CLUSTER_NAME }} --kubeconfig ${{ secrets.KUBE_CONFIG_PATH }}
          kubectl config set-context ${{secrets.CONTEXT_NAME }}

      - name: Install external-DNS
        working-directory: /home/runner/work/eks-devops/eks-devops/manifests
        run: kubectl  apply -f dns-serviceaccount.yml

      - name: Aggregate secret for accessing GitHub Container Registry from k8s
        working-directory: /home/runner/work/eks-devops/eks-devops/manifests
        run: | 
          cat << 'EOF' > ghcrcred.yml
          ${{ secrets.GHCRCRED }}
          EOF

      - name: Deploy devsu test
        working-directory: /home/runner/work/eks-devops/eks-devops/manifests
        run: | 
          kubectl apply -f namespace.yml
          kubectl apply -f ghcrcred.yml
          kubectl apply -f deployment.yml
          kubectl apply -f hpa.yml

      - name: Getting dns name
        run: kubectl get ingress devsu-ingress -n devsu -o jsonpath='{.spec.rules[0].host}'

  Destroy_terraform_infrastructure:
    runs-on: ubuntu-latest
    needs: [Deploy_terraform_insfrastructure, Deploy_k8s_manifests ]
    env:
      KUBECONFIG: ${{ secrets.KUBE_CONFIG_PATH }}
    
    steps: 

      - name: GitHub Checkout
        uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~> 1.9.6"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - uses: azure/setup-kubectl@v4
        with:
          version: 'v1.31.1'
        id: install

      - name: Get and set kubeconfig
        run: |
          aws eks --region us-east-1 update-kubeconfig --name ${{ secrets.CLUSTER_NAME }} --kubeconfig ${{ secrets.KUBE_CONFIG_PATH }}
          kubectl config set-context ${{secrets.CONTEXT_NAME }}

      - name: Removing k8s namespace and resources
        run: kubectl delete namespace devsu

      - name: Terraform init
        working-directory: /home/runner/work/eks-devops/eks-devops/terraform
        run: terraform init -backend-config="bucket=${{ secrets.BUCKET_NAME }}" -backend-config="key=${{ secrets.BUCKET_KEY }}" -backend-config="dynamodb_table=dynamodb-state-locking" -backend-config="encrypt=true"

      - name: Terraform destroy
        working-directory: /home/runner/work/eks-devops/eks-devops/terraform
        run: terraform destroy --var="environment=${{ secrets.ENVIRONMENT_TERRAFORM_DEPLOYMENT }}" --auto-approve
